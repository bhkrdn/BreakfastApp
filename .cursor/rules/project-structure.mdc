---
description: This file is reference for the project structure. Update this when you create a new file in the app. 
globs: 
alwaysApply: false
---
BreakfastApp/
â”œâ”€â”€ App/
â”‚   â”œâ”€â”€ BreakfastAppApp.swift         # App entry point (NavigationStack starts here)
â”‚   â”œâ”€â”€ LaunchScreen.swift (optional) # Minimal splash screen view
â”œâ”€â”€ Views/
â”‚   â”œâ”€â”€ HomeView.swift                # Main Recipe Suggestions Screen
â”‚   â”œâ”€â”€ RecipeDetailView.swift         # Detailed recipe page
â”‚   â”œâ”€â”€ PantryView.swift               # Pantry ingredient management screen
â”‚   â”œâ”€â”€ FavoritesView.swift            # Saved recipes list
â”œâ”€â”€ Models/
â”‚   â”œâ”€â”€ Ingredient.swift               # Ingredient model (name, type)
â”‚   â”œâ”€â”€ Recipe.swift                   # Recipe model (title, ingredients, prep time, tags)
â”œâ”€â”€ ViewModels/
â”‚   â”œâ”€â”€ PantryViewModel.swift          # Manages pantry data
â”‚   â”œâ”€â”€ FavoritesViewModel.swift       # Manages saved recipes
â”‚   â”œâ”€â”€ RecipeSuggestionViewModel.swift# Manages matching recipes based on pantry
â”œâ”€â”€ Assets.xcassets/
â”‚   â”œâ”€â”€ AppIcon.appiconset/
â”‚   â”œâ”€â”€ LaunchScreen.imageset/
â”‚   â”œâ”€â”€ SampleFoodImages/              # Demo or AI food images if needed
â”œâ”€â”€ Resources/
â”‚   â”œâ”€â”€ recipes.json                   # Static recipe database
â”œâ”€â”€ Helpers/
â”‚   â”œâ”€â”€ StorageManager.swift           # Read/write UserDefaults (pantry, favorites)
â”‚   â”œâ”€â”€ RecipeMatcher.swift            # Logic for matching pantry to recipes
â”œâ”€â”€ SupportingFiles/
â”‚   â”œâ”€â”€ Info.plist

---
## âœ… Key Organizational Rules

| Area       | Rule                                                                    |
| ---------- | ----------------------------------------------------------------------- |
| Views      | All UI screens live in `/Views`                                         |
| Models     | All data structures (Ingredient, Recipe) live in `/Models`              |
| ViewModels | State management lives in `/ViewModels`, powered by `@ObservableObject` |
| Resources  | Static files (recipes.json) stay in `/Resources`                        |
| Helpers    | Utility classes stay in `/Helpers`                                      |
| App Entry  | `BreakfastAppApp.swift` holds `NavigationStack` root setup              |

## ðŸ§  Why This Structure?

- **Modular:** Easy to add new screens (like Settings or Profile later).
- **Scalable:** Adding new features fits naturally.
- **Separation:** Clear MVVM separation ensures maintainability.
- **Developer-friendly:** Easy for any Swift developer to understand immediately.
